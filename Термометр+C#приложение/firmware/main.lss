
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000a72  00000b06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800102  00800102  00000b08  2**0
                  ALLOC
  3 .stab         00000e94  00000000  00000000  00000b08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000073  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00001a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000292  00000000  00000000  00001a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000010d3  00000000  00000000  00001ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000052c  00000000  00000000  00002db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000009ad  00000000  00000000  000032e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000e0  00000000  00000000  00003c90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004ae  00000000  00000000  00003d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000570  00000000  00000000  0000421e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  0000478e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	50 c0       	rjmp	.+160    	; 0xa2 <__ctors_end>
   2:	db c3       	rjmp	.+1974   	; 0x7ba <__vector_1>
   4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
   6:	68 c0       	rjmp	.+208    	; 0xd8 <__bad_interrupt>
   8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
   a:	66 c0       	rjmp	.+204    	; 0xd8 <__bad_interrupt>
   c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
   e:	64 c0       	rjmp	.+200    	; 0xd8 <__bad_interrupt>
  10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
  12:	62 c0       	rjmp	.+196    	; 0xd8 <__bad_interrupt>
  14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
  16:	60 c0       	rjmp	.+192    	; 0xd8 <__bad_interrupt>
  18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
  1a:	5e c0       	rjmp	.+188    	; 0xd8 <__bad_interrupt>
  1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
  1e:	5c c0       	rjmp	.+184    	; 0xd8 <__bad_interrupt>
  20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
  22:	5a c0       	rjmp	.+180    	; 0xd8 <__bad_interrupt>
  24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
  26:	58 c0       	rjmp	.+176    	; 0xd8 <__bad_interrupt>
  28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
  2a:	56 c0       	rjmp	.+172    	; 0xd8 <__bad_interrupt>
  2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
  2e:	54 c0       	rjmp	.+168    	; 0xd8 <__bad_interrupt>
  30:	53 c0       	rjmp	.+166    	; 0xd8 <__bad_interrupt>
  32:	52 c0       	rjmp	.+164    	; 0xd8 <__bad_interrupt>

00000034 <usbDescriptorString0>:
  34:	04 03 09 04                                         ....

00000038 <usbDescriptorStringVendor>:
  38:	12 03 42 00 72 00 2e 00 4d 00 69 00 73 00 68 00     ..B.r...M.i.s.h.
  48:	61 00                                               a.

0000004a <usbDescriptorStringDevice>:
  4a:	1e 03 55 00 53 00 42 00 54 00 68 00 65 00 72 00     ..U.S.B.T.h.e.r.
  5a:	6d 00 6f 00 6d 00 65 00 74 00 65 00 72 00           m.o.m.e.t.e.r.

00000068 <usbDescriptorDevice>:
  68:	12 01 10 01 ff 00 00 08 d2 ff aa 01 14 15 01 02     ................
  78:	00 01                                               ..

0000007a <usbDescriptorConfiguration>:
  7a:	09 02 12 00 01 01 00 80 14 09 04 00 00 00 00 00     ................
  8a:	00 00                                               ..

0000008c <usbHidReportDescriptor>:
  8c:	06 00 ff 09 01 a1 01 15 00 26 ff 00 75 16 95 01     .........&..u...
  9c:	09 00 b2 02 01 c0                                   ......

000000a2 <__ctors_end>:
  a2:	11 24       	eor	r1, r1
  a4:	1f be       	out	0x3f, r1	; 63
  a6:	cf ef       	ldi	r28, 0xFF	; 255
  a8:	d2 e0       	ldi	r29, 0x02	; 2
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	e2 e7       	ldi	r30, 0x72	; 114
  b6:	fa e0       	ldi	r31, 0x0A	; 10
  b8:	02 c0       	rjmp	.+4      	; 0xbe <.do_copy_data_start>

000000ba <.do_copy_data_loop>:
  ba:	05 90       	lpm	r0, Z+
  bc:	0d 92       	st	X+, r0

000000be <.do_copy_data_start>:
  be:	a2 30       	cpi	r26, 0x02	; 2
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <.do_copy_data_loop>

000000c4 <__do_clear_bss>:
  c4:	11 e0       	ldi	r17, 0x01	; 1
  c6:	a2 e0       	ldi	r26, 0x02	; 2
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	ae 33       	cpi	r26, 0x3E	; 62
  d0:	b1 07       	cpc	r27, r17
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	0a d1       	rcall	.+532    	; 0x2ea <main>
  d6:	cb c4       	rjmp	.+2454   	; 0xa6e <_exit>

000000d8 <__bad_interrupt>:
  d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
  da:	e9 e6       	ldi	r30, 0x69	; 105
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
  e4:	e8 9a       	sbi	0x1d, 0	; 29
    usbTxLen1 = USBPID_NAK;
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
  e6:	08 95       	ret

000000e8 <usbFunctionSetup>:

unsigned char buffer[14] = {0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0};


usbMsgLen_t usbFunctionSetup(uchar data[16]) {
usbRequest_t    *rq = (void *)data;
  e8:	fc 01       	movw	r30, r24

    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_VENDOR){
  ea:	80 81       	ld	r24, Z
  ec:	80 76       	andi	r24, 0x60	; 96
  ee:	80 34       	cpi	r24, 0x40	; 64
  f0:	59 f4       	brne	.+22     	; 0x108 <usbFunctionSetup+0x20>
      
       if(rq->bRequest == CUSTOM_RQ_GET_STATUS){
  f2:	81 81       	ldd	r24, Z+1	; 0x01
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	41 f4       	brne	.+16     	; 0x108 <usbFunctionSetup+0x20>
           usbMsgPtr = buffer;  // указываем на структуру
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	90 93 23 01 	sts	0x0123, r25
 100:	80 93 22 01 	sts	0x0122, r24
 104:	80 e1       	ldi	r24, 0x10	; 16
 106:	08 95       	ret
            return 16; /* говорим драйверу послать 1 байт */
 108:	80 e0       	ldi	r24, 0x00	; 0
    return 0; 



   
}
 10a:	08 95       	ret

0000010c <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 10c:	1f 93       	push	r17
schar   len;
uchar   i;

    len = usbRxLen - 3;
 10e:	90 91 24 01 	lds	r25, 0x0124
 112:	93 50       	subi	r25, 0x03	; 3
    if(len >= 0){
 114:	97 fd       	sbrc	r25, 7
 116:	90 c0       	rjmp	.+288    	; 0x238 <usbPoll+0x12c>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 118:	20 91 21 01 	lds	r18, 0x0121
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 11c:	80 91 20 01 	lds	r24, 0x0120
 120:	8d 32       	cpi	r24, 0x2D	; 45
 122:	09 f0       	breq	.+2      	; 0x126 <usbPoll+0x1a>
 124:	87 c0       	rjmp	.+270    	; 0x234 <usbPoll+0x128>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 126:	98 30       	cpi	r25, 0x08	; 8
 128:	09 f0       	breq	.+2      	; 0x12c <usbPoll+0x20>
 12a:	84 c0       	rjmp	.+264    	; 0x234 <usbPoll+0x128>
 * routine. It distinguishes between SETUP and DATA packets and processes
 * them accordingly.
 */
static inline void usbProcessRx(uchar *data, uchar len)
{
usbRequest_t    *rq = (void *)data;
 12c:	ec e0       	ldi	r30, 0x0C	; 12
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	e2 1b       	sub	r30, r18
 132:	f1 09       	sbc	r31, r1
 134:	e8 5d       	subi	r30, 0xD8	; 216
 136:	fe 4f       	sbci	r31, 0xFE	; 254
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 138:	83 ec       	ldi	r24, 0xC3	; 195
 13a:	80 93 12 01 	sts	0x0112, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 13e:	8a e5       	ldi	r24, 0x5A	; 90
 140:	80 93 00 01 	sts	0x0100, r24
        usbMsgFlags = 0;
 144:	10 92 10 01 	sts	0x0110, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
 148:	90 81       	ld	r25, Z
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 14a:	89 2f       	mov	r24, r25
 14c:	80 76       	andi	r24, 0x60	; 96
 14e:	79 f0       	breq	.+30     	; 0x16e <usbPoll+0x62>


usbMsgLen_t usbFunctionSetup(uchar data[16]) {
usbRequest_t    *rq = (void *)data;

    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_VENDOR){
 150:	80 34       	cpi	r24, 0x40	; 64
 152:	09 f0       	breq	.+2      	; 0x156 <usbPoll+0x4a>
 154:	65 c0       	rjmp	.+202    	; 0x220 <usbPoll+0x114>
      
       if(rq->bRequest == CUSTOM_RQ_GET_STATUS){
 156:	81 81       	ldd	r24, Z+1	; 0x01
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	09 f0       	breq	.+2      	; 0x15e <usbPoll+0x52>
 15c:	61 c0       	rjmp	.+194    	; 0x220 <usbPoll+0x114>
           usbMsgPtr = buffer;  // указываем на структуру
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	90 93 23 01 	sts	0x0123, r25
 166:	80 93 22 01 	sts	0x0122, r24
 16a:	20 e1       	ldi	r18, 0x10	; 16
 16c:	5a c0       	rjmp	.+180    	; 0x222 <usbPoll+0x116>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 16e:	92 81       	ldd	r25, Z+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 170:	10 92 1b 01 	sts	0x011B, r1
    SWITCH_START(rq->bRequest)
 174:	81 81       	ldd	r24, Z+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 176:	88 23       	and	r24, r24
 178:	21 f4       	brne	.+8      	; 0x182 <usbPoll+0x76>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 17a:	10 92 1c 01 	sts	0x011C, r1
 17e:	22 e0       	ldi	r18, 0x02	; 2
 180:	48 c0       	rjmp	.+144    	; 0x212 <usbPoll+0x106>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 182:	85 30       	cpi	r24, 0x05	; 5
 184:	19 f4       	brne	.+6      	; 0x18c <usbPoll+0x80>
        usbNewDeviceAddr = value;
 186:	90 93 25 01 	sts	0x0125, r25
 18a:	42 c0       	rjmp	.+132    	; 0x210 <usbPoll+0x104>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 18c:	86 30       	cpi	r24, 0x06	; 6
 18e:	89 f5       	brne	.+98     	; 0x1f2 <usbPoll+0xe6>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 190:	83 81       	ldd	r24, Z+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	19 f4       	brne	.+6      	; 0x19c <usbPoll+0x90>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 196:	88 e6       	ldi	r24, 0x68	; 104
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	16 c0       	rjmp	.+44     	; 0x1c8 <usbPoll+0xbc>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	19 f4       	brne	.+6      	; 0x1a6 <usbPoll+0x9a>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 1a0:	8a e7       	ldi	r24, 0x7A	; 122
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	11 c0       	rjmp	.+34     	; 0x1c8 <usbPoll+0xbc>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 1a6:	83 30       	cpi	r24, 0x03	; 3
 1a8:	f9 f4       	brne	.+62     	; 0x1e8 <usbPoll+0xdc>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
 1aa:	82 81       	ldd	r24, Z+2	; 0x02
        SWITCH_CASE(0)
 1ac:	88 23       	and	r24, r24
 1ae:	41 f4       	brne	.+16     	; 0x1c0 <usbPoll+0xb4>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 1b0:	84 e3       	ldi	r24, 0x34	; 52
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	90 93 23 01 	sts	0x0123, r25
 1b8:	80 93 22 01 	sts	0x0122, r24
 1bc:	24 e0       	ldi	r18, 0x04	; 4
 1be:	15 c0       	rjmp	.+42     	; 0x1ea <usbPoll+0xde>
        SWITCH_CASE(1)
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	41 f4       	brne	.+16     	; 0x1d4 <usbPoll+0xc8>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 1c4:	88 e3       	ldi	r24, 0x38	; 56
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	90 93 23 01 	sts	0x0123, r25
 1cc:	80 93 22 01 	sts	0x0122, r24
 1d0:	22 e1       	ldi	r18, 0x12	; 18
 1d2:	0b c0       	rjmp	.+22     	; 0x1ea <usbPoll+0xde>
        SWITCH_CASE(2)
 1d4:	82 30       	cpi	r24, 0x02	; 2
 1d6:	41 f4       	brne	.+16     	; 0x1e8 <usbPoll+0xdc>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 1d8:	8a e4       	ldi	r24, 0x4A	; 74
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	90 93 23 01 	sts	0x0123, r25
 1e0:	80 93 22 01 	sts	0x0122, r24
 1e4:	2e e1       	ldi	r18, 0x1E	; 30
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <usbPoll+0xde>
 1e8:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 1ea:	80 e4       	ldi	r24, 0x40	; 64
 1ec:	80 93 10 01 	sts	0x0110, r24
 1f0:	18 c0       	rjmp	.+48     	; 0x222 <usbPoll+0x116>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 1f2:	88 30       	cpi	r24, 0x08	; 8
 1f4:	21 f4       	brne	.+8      	; 0x1fe <usbPoll+0xf2>
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	87 e2       	ldi	r24, 0x27	; 39
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	0c c0       	rjmp	.+24     	; 0x216 <usbPoll+0x10a>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 1fe:	89 30       	cpi	r24, 0x09	; 9
 200:	19 f4       	brne	.+6      	; 0x208 <usbPoll+0xfc>
        usbConfiguration = value;
 202:	90 93 27 01 	sts	0x0127, r25
 206:	04 c0       	rjmp	.+8      	; 0x210 <usbPoll+0x104>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 208:	8a 30       	cpi	r24, 0x0A	; 10
 20a:	11 f4       	brne	.+4      	; 0x210 <usbPoll+0x104>
 20c:	21 e0       	ldi	r18, 0x01	; 1
 20e:	01 c0       	rjmp	.+2      	; 0x212 <usbPoll+0x106>
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	8b e1       	ldi	r24, 0x1B	; 27
 214:	91 e0       	ldi	r25, 0x01	; 1
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 216:	90 93 23 01 	sts	0x0123, r25
 21a:	80 93 22 01 	sts	0x0122, r24
 21e:	01 c0       	rjmp	.+2      	; 0x222 <usbPoll+0x116>
 220:	20 e0       	ldi	r18, 0x00	; 0
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 222:	87 81       	ldd	r24, Z+7	; 0x07
 224:	88 23       	and	r24, r24
 226:	21 f4       	brne	.+8      	; 0x230 <usbPoll+0x124>
 228:	86 81       	ldd	r24, Z+6	; 0x06
 22a:	82 17       	cp	r24, r18
 22c:	08 f4       	brcc	.+2      	; 0x230 <usbPoll+0x124>
 22e:	28 2f       	mov	r18, r24
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 230:	20 93 01 01 	sts	0x0101, r18
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 234:	10 92 24 01 	sts	0x0124, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 238:	80 91 00 01 	lds	r24, 0x0100
 23c:	84 ff       	sbrs	r24, 4
 23e:	49 c0       	rjmp	.+146    	; 0x2d2 <usbPoll+0x1c6>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 240:	80 91 01 01 	lds	r24, 0x0101
 244:	8f 3f       	cpi	r24, 0xFF	; 255
 246:	09 f4       	brne	.+2      	; 0x24a <usbPoll+0x13e>
 248:	44 c0       	rjmp	.+136    	; 0x2d2 <usbPoll+0x1c6>
 24a:	18 2f       	mov	r17, r24
 24c:	89 30       	cpi	r24, 0x09	; 9
 24e:	08 f0       	brcs	.+2      	; 0x252 <usbPoll+0x146>
 250:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 252:	81 1b       	sub	r24, r17
 254:	80 93 01 01 	sts	0x0101, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 258:	80 91 12 01 	lds	r24, 0x0112
 25c:	98 e8       	ldi	r25, 0x88	; 136
 25e:	89 27       	eor	r24, r25
 260:	80 93 12 01 	sts	0x0112, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 264:	11 23       	and	r17, r17
 266:	41 f1       	breq	.+80     	; 0x2b8 <usbPoll+0x1ac>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 268:	20 91 22 01 	lds	r18, 0x0122
 26c:	30 91 23 01 	lds	r19, 0x0123
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 270:	80 91 10 01 	lds	r24, 0x0110
 274:	86 ff       	sbrs	r24, 6
 276:	0d c0       	rjmp	.+26     	; 0x292 <usbPoll+0x186>
 278:	a3 e1       	ldi	r26, 0x13	; 19
 27a:	b1 e0       	ldi	r27, 0x01	; 1
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 280:	f9 01       	movw	r30, r18
 282:	e8 0f       	add	r30, r24
 284:	f9 1f       	adc	r31, r25
 286:	e4 91       	lpm	r30, Z+
                    *data++ = c;
 288:	ed 93       	st	X+, r30
 28a:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
 28c:	18 17       	cp	r17, r24
 28e:	c1 f7       	brne	.-16     	; 0x280 <usbPoll+0x174>
 290:	08 c0       	rjmp	.+16     	; 0x2a2 <usbPoll+0x196>
 292:	91 2f       	mov	r25, r17
 294:	d9 01       	movw	r26, r18
 296:	e3 e1       	ldi	r30, 0x13	; 19
 298:	f1 e0       	ldi	r31, 0x01	; 1
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 29a:	8d 91       	ld	r24, X+
 29c:	81 93       	st	Z+, r24
                }while(--i);
 29e:	91 50       	subi	r25, 0x01	; 1
 2a0:	e1 f7       	brne	.-8      	; 0x29a <usbPoll+0x18e>
 2a2:	11 50       	subi	r17, 0x01	; 1
 2a4:	81 2f       	mov	r24, r17
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	1f 5f       	subi	r17, 0xFF	; 255
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	82 0f       	add	r24, r18
 2ae:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
 2b0:	90 93 23 01 	sts	0x0123, r25
 2b4:	80 93 22 01 	sts	0x0122, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 2b8:	83 e1       	ldi	r24, 0x13	; 19
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	61 2f       	mov	r22, r17
 2be:	79 d2       	rcall	.+1266   	; 0x7b2 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 2c0:	61 2f       	mov	r22, r17
 2c2:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 2c4:	6c 30       	cpi	r22, 0x0C	; 12
 2c6:	19 f0       	breq	.+6      	; 0x2ce <usbPoll+0x1c2>
            usbMsgLen = USB_NO_MSG;
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	80 93 01 01 	sts	0x0101, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 2ce:	60 93 00 01 	sts	0x0100, r22
 2d2:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 2d4:	89 b1       	in	r24, 0x09	; 9
        if(usbLineStatus != 0)  /* SE0 has ended */
 2d6:	8c 70       	andi	r24, 0x0C	; 12
 2d8:	31 f4       	brne	.+12     	; 0x2e6 <usbPoll+0x1da>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 2da:	91 50       	subi	r25, 0x01	; 1
 2dc:	d9 f7       	brne	.-10     	; 0x2d4 <usbPoll+0x1c8>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 2de:	10 92 25 01 	sts	0x0125, r1
    usbDeviceAddr = 0;
 2e2:	10 92 1f 01 	sts	0x011F, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 2e6:	1f 91       	pop	r17
 2e8:	08 95       	ret

000002ea <main>:

   
}

int main(void)
{
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 2ee:	80 91 69 00 	lds	r24, 0x0069
 2f2:	82 60       	ori	r24, 0x02	; 2
 2f4:	80 93 69 00 	sts	0x0069, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 2f8:	e8 9a       	sbi	0x1d, 0	; 29
	
	usb_init_all;
 2fa:	54 98       	cbi	0x0a, 4	; 10
 2fc:	5c 98       	cbi	0x0b, 4	; 11
 2fe:	84 ec       	ldi	r24, 0xC4	; 196
 300:	99 e0       	ldi	r25, 0x09	; 9
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 302:	2c e2       	ldi	r18, 0x2C	; 44
 304:	31 e0       	ldi	r19, 0x01	; 1
 306:	f9 01       	movw	r30, r18
 308:	31 97       	sbiw	r30, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <__stack+0x9>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 30c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 30e:	d9 f7       	brne	.-10     	; 0x306 <__stack+0x7>
 310:	54 9a       	sbi	0x0a, 4	; 10
 312:	5c 9a       	sbi	0x0b, 4	; 11
    sei();
 314:	78 94       	sei
 316:	cc e2       	ldi	r28, 0x2C	; 44
 318:	d1 e0       	ldi	r29, 0x01	; 1
    while(1)
	{
	usbPoll();
 31a:	f8 de       	rcall	.-528    	; 0x10c <usbPoll>
		therm_read_temperature(buffer, 0);
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	18 d1       	rcall	.+560    	; 0x554 <therm_read_temperature>
 324:	88 e8       	ldi	r24, 0x88	; 136
 326:	93 e1       	ldi	r25, 0x13	; 19
 328:	fe 01       	movw	r30, r28
 32a:	31 97       	sbiw	r30, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <__stack+0x2b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 32e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 330:	d9 f7       	brne	.-10     	; 0x328 <__stack+0x29>
		_delay_ms(500);
		therm_read_temperature(buffer, 0);
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	0d d1       	rcall	.+538    	; 0x554 <therm_read_temperature>
 33a:	88 e8       	ldi	r24, 0x88	; 136
 33c:	93 e1       	ldi	r25, 0x13	; 19
 33e:	fe 01       	movw	r30, r28
 340:	31 97       	sbiw	r30, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <__stack+0x41>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 344:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 346:	d9 f7       	brne	.-10     	; 0x33e <__stack+0x3f>
		_delay_ms(500);
		//search_ROM();
		//ibi(PORTC,4);
		
		
    usbPoll();
 348:	e1 de       	rcall	.-574    	; 0x10c <usbPoll>
 34a:	e7 cf       	rjmp	.-50     	; 0x31a <__stack+0x1b>

0000034c <therm_write_bit>:
}

void therm_write_bit(uint8_t bit)
{
	//Pull line low for 1uS
	ds_cbi(THERM_PORT,THERM_DQ);
 34c:	9b b1       	in	r25, 0x0b	; 11
 34e:	20 91 11 01 	lds	r18, 0x0111
 352:	41 e0       	ldi	r20, 0x01	; 1
 354:	50 e0       	ldi	r21, 0x00	; 0
 356:	ba 01       	movw	r22, r20
 358:	02 c0       	rjmp	.+4      	; 0x35e <therm_write_bit+0x12>
 35a:	66 0f       	add	r22, r22
 35c:	77 1f       	adc	r23, r23
 35e:	2a 95       	dec	r18
 360:	e2 f7       	brpl	.-8      	; 0x35a <therm_write_bit+0xe>
 362:	9b 01       	movw	r18, r22
 364:	20 95       	com	r18
 366:	29 23       	and	r18, r25
 368:	2b b9       	out	0x0b, r18	; 11
	ds_sbi(THERM_DDR,THERM_DQ);
 36a:	9a b1       	in	r25, 0x0a	; 10
 36c:	20 91 11 01 	lds	r18, 0x0111
 370:	ba 01       	movw	r22, r20
 372:	02 c0       	rjmp	.+4      	; 0x378 <therm_write_bit+0x2c>
 374:	66 0f       	add	r22, r22
 376:	77 1f       	adc	r23, r23
 378:	2a 95       	dec	r18
 37a:	e2 f7       	brpl	.-8      	; 0x374 <therm_write_bit+0x28>
 37c:	96 2b       	or	r25, r22
 37e:	9a b9       	out	0x0a, r25	; 10
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 380:	94 e0       	ldi	r25, 0x04	; 4
 382:	9a 95       	dec	r25
 384:	f1 f7       	brne	.-4      	; 0x382 <therm_write_bit+0x36>
	_delay_us(1);
	//If we want to write 1, release the line (if not will keep low)
	if(bit) ds_cbi(THERM_DDR,THERM_DQ);
 386:	88 23       	and	r24, r24
 388:	61 f0       	breq	.+24     	; 0x3a2 <therm_write_bit+0x56>
 38a:	9a b1       	in	r25, 0x0a	; 10
 38c:	80 91 11 01 	lds	r24, 0x0111
 390:	02 c0       	rjmp	.+4      	; 0x396 <therm_write_bit+0x4a>
 392:	44 0f       	add	r20, r20
 394:	55 1f       	adc	r21, r21
 396:	8a 95       	dec	r24
 398:	e2 f7       	brpl	.-8      	; 0x392 <therm_write_bit+0x46>
 39a:	84 2f       	mov	r24, r20
 39c:	80 95       	com	r24
 39e:	89 23       	and	r24, r25
 3a0:	8a b9       	out	0x0a, r24	; 10
 3a2:	80 ef       	ldi	r24, 0xF0	; 240
 3a4:	8a 95       	dec	r24
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <therm_write_bit+0x58>
	//Wait for 60uS and release the line
	_delay_us(60);
	ds_cbi(THERM_DDR,THERM_DQ);
 3a8:	3a b1       	in	r19, 0x0a	; 10
 3aa:	20 91 11 01 	lds	r18, 0x0111
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <therm_write_bit+0x6c>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	2a 95       	dec	r18
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <therm_write_bit+0x68>
 3bc:	80 95       	com	r24
 3be:	83 23       	and	r24, r19
 3c0:	8a b9       	out	0x0a, r24	; 10
}
 3c2:	08 95       	ret

000003c4 <therm_read_bit>:

uint8_t therm_read_bit(void)
{
	uint8_t bit=0;
	//Pull line low for 1uS
	ds_cbi(THERM_PORT,THERM_DQ);
 3c4:	4b b1       	in	r20, 0x0b	; 11
 3c6:	80 91 11 01 	lds	r24, 0x0111
 3ca:	21 e0       	ldi	r18, 0x01	; 1
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	b9 01       	movw	r22, r18
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <therm_read_bit+0x12>
 3d2:	66 0f       	add	r22, r22
 3d4:	77 1f       	adc	r23, r23
 3d6:	8a 95       	dec	r24
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <therm_read_bit+0xe>
 3da:	cb 01       	movw	r24, r22
 3dc:	80 95       	com	r24
 3de:	84 23       	and	r24, r20
 3e0:	8b b9       	out	0x0b, r24	; 11
	ds_sbi(THERM_DDR,THERM_DQ);
 3e2:	4a b1       	in	r20, 0x0a	; 10
 3e4:	80 91 11 01 	lds	r24, 0x0111
 3e8:	b9 01       	movw	r22, r18
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <therm_read_bit+0x2c>
 3ec:	66 0f       	add	r22, r22
 3ee:	77 1f       	adc	r23, r23
 3f0:	8a 95       	dec	r24
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <therm_read_bit+0x28>
 3f4:	46 2b       	or	r20, r22
 3f6:	4a b9       	out	0x0a, r20	; 10
 3f8:	84 e0       	ldi	r24, 0x04	; 4
 3fa:	8a 95       	dec	r24
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <therm_read_bit+0x36>
	_delay_us(1);
	//Release line and wait for 14uS
	ds_cbi(THERM_DDR,THERM_DQ);
 3fe:	9a b1       	in	r25, 0x0a	; 10
 400:	80 91 11 01 	lds	r24, 0x0111
 404:	02 c0       	rjmp	.+4      	; 0x40a <therm_read_bit+0x46>
 406:	22 0f       	add	r18, r18
 408:	33 1f       	adc	r19, r19
 40a:	8a 95       	dec	r24
 40c:	e2 f7       	brpl	.-8      	; 0x406 <therm_read_bit+0x42>
 40e:	20 95       	com	r18
 410:	29 23       	and	r18, r25
 412:	2a b9       	out	0x0a, r18	; 10
 414:	88 e3       	ldi	r24, 0x38	; 56
 416:	8a 95       	dec	r24
 418:	f1 f7       	brne	.-4      	; 0x416 <therm_read_bit+0x52>
	_delay_us(14);
	//Read line value
	if(THERM_PIN&(1<<THERM_DQ)) bit=1;
 41a:	89 b1       	in	r24, 0x09	; 9
 41c:	20 91 11 01 	lds	r18, 0x0111
 420:	94 eb       	ldi	r25, 0xB4	; 180
 422:	9a 95       	dec	r25
 424:	f1 f7       	brne	.-4      	; 0x422 <therm_read_bit+0x5e>
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 c0       	rjmp	.+4      	; 0x42e <therm_read_bit+0x6a>
 42a:	95 95       	asr	r25
 42c:	87 95       	ror	r24
 42e:	2a 95       	dec	r18
 430:	e2 f7       	brpl	.-8      	; 0x42a <therm_read_bit+0x66>
	//Wait for 45uS to end and return read value
	_delay_us(45);
	return bit;
}
 432:	81 70       	andi	r24, 0x01	; 1
 434:	08 95       	ret

00000436 <other_function1>:
# ifdef OTHERS_FUNCTIONS
	#include "usbdrv/usbdrv.h"
	
	void other_function1(void)
	{
		usbPoll();
 436:	6a de       	rcall	.-812    	; 0x10c <usbPoll>
	}
 438:	08 95       	ret

0000043a <therm_write_byte>:
	}
	return n;
}

void therm_write_byte(uint8_t byte)
{
 43a:	0f 93       	push	r16
 43c:	1f 93       	push	r17
 43e:	08 2f       	mov	r16, r24
 440:	18 e0       	ldi	r17, 0x08	; 8
 442:	05 c0       	rjmp	.+10     	; 0x44e <therm_write_byte+0x14>
	uint8_t i=8;
	while(i--)
	{
		//Write actual bit and shift one position right to make the next bit ready
		therm_write_bit(byte&1);
 444:	80 2f       	mov	r24, r16
 446:	81 70       	andi	r24, 0x01	; 1
 448:	81 df       	rcall	.-254    	; 0x34c <therm_write_bit>
		byte>>=1;
 44a:	06 95       	lsr	r16
# ifdef OTHERS_FUNCTIONS
	#include "usbdrv/usbdrv.h"
	
	void other_function1(void)
	{
		usbPoll();
 44c:	5f de       	rcall	.-834    	; 0x10c <usbPoll>
}

void therm_write_byte(uint8_t byte)
{
	uint8_t i=8;
	while(i--)
 44e:	11 50       	subi	r17, 0x01	; 1
 450:	c8 f7       	brcc	.-14     	; 0x444 <therm_write_byte+0xa>
		//Write actual bit and shift one position right to make the next bit ready
		therm_write_bit(byte&1);
		byte>>=1;
			other_function1();
	}
}
 452:	1f 91       	pop	r17
 454:	0f 91       	pop	r16
 456:	08 95       	ret

00000458 <search_ROM>:
	other_function1();
	

}

void search_ROM(void){
 458:	ff 92       	push	r15
 45a:	0f 93       	push	r16
 45c:	1f 93       	push	r17
	//therm_reset();
	//Формируем команду поиск ROM
	therm_write_byte(THERM_CMD_SEARCHROM);    
 45e:	80 ef       	ldi	r24, 0xF0	; 240
 460:	ec df       	rcall	.-40     	; 0x43a <therm_write_byte>
 462:	ff 24       	eor	r15, r15
 464:	0c c0       	rjmp	.+24     	; 0x47e <search_ROM+0x26>
	uint8_t bit;
	uint8_t SROM[8] = {0};
	unsigned char buffer[8] = {0,0, 0,0,0,0,0,0};
    for (uint8_t j=0;j<8;j++) {
		for (uint8_t i=0;i<8;i++) {
			bit = therm_read_bit();
 466:	ae df       	rcall	.-164    	; 0x3c4 <therm_read_bit>
 468:	18 2f       	mov	r17, r24
				  therm_read_bit();        //// ?????
 46a:	ac df       	rcall	.-168    	; 0x3c4 <therm_read_bit>
			therm_write_bit(bit);
 46c:	81 2f       	mov	r24, r17
 46e:	6e df       	rcall	.-292    	; 0x34c <therm_write_bit>
	//uint64_t SROM=0;
	uint8_t bit;
	uint8_t SROM[8] = {0};
	unsigned char buffer[8] = {0,0, 0,0,0,0,0,0};
    for (uint8_t j=0;j<8;j++) {
		for (uint8_t i=0;i<8;i++) {
 470:	0f 5f       	subi	r16, 0xFF	; 255
 472:	08 30       	cpi	r16, 0x08	; 8
 474:	c1 f7       	brne	.-16     	; 0x466 <search_ROM+0xe>
	
	//uint64_t SROM=0;
	uint8_t bit;
	uint8_t SROM[8] = {0};
	unsigned char buffer[8] = {0,0, 0,0,0,0,0,0};
    for (uint8_t j=0;j<8;j++) {
 476:	f3 94       	inc	r15
 478:	88 e0       	ldi	r24, 0x08	; 8
 47a:	f8 16       	cp	r15, r24
 47c:	11 f0       	breq	.+4      	; 0x482 <search_ROM+0x2a>
 47e:	00 e0       	ldi	r16, 0x00	; 0
 480:	f2 cf       	rjmp	.-28     	; 0x466 <search_ROM+0xe>
 482:	80 e4       	ldi	r24, 0x40	; 64
 484:	9c e9       	ldi	r25, 0x9C	; 156
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 486:	2c e2       	ldi	r18, 0x2C	; 44
 488:	31 e0       	ldi	r19, 0x01	; 1
 48a:	f9 01       	movw	r30, r18
 48c:	31 97       	sbiw	r30, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <search_ROM+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 490:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 492:	d9 f7       	brne	.-10     	; 0x48a <search_ROM+0x32>
	}
	_delay_ms(4000);
	
	
	
}
 494:	1f 91       	pop	r17
 496:	0f 91       	pop	r16
 498:	ff 90       	pop	r15
 49a:	08 95       	ret

0000049c <therm_read_byte>:
	_delay_us(45);
	return bit;
}

uint8_t therm_read_byte(void)
{
 49c:	0f 93       	push	r16
 49e:	1f 93       	push	r17
 4a0:	08 e0       	ldi	r16, 0x08	; 8
 4a2:	10 e0       	ldi	r17, 0x00	; 0
 4a4:	09 c0       	rjmp	.+18     	; 0x4b8 <therm_read_byte+0x1c>
	uint8_t i=8, n=0;
	while(i--)
	{
		//Shift one position right and store read value	
		n>>=1;
		n|=(therm_read_bit()<<7);
 4a6:	8e df       	rcall	.-228    	; 0x3c4 <therm_read_bit>
 4a8:	91 2f       	mov	r25, r17
 4aa:	96 95       	lsr	r25
 4ac:	18 2f       	mov	r17, r24
 4ae:	17 95       	ror	r17
 4b0:	11 27       	eor	r17, r17
 4b2:	17 95       	ror	r17
 4b4:	19 2b       	or	r17, r25
# ifdef OTHERS_FUNCTIONS
	#include "usbdrv/usbdrv.h"
	
	void other_function1(void)
	{
		usbPoll();
 4b6:	2a de       	rcall	.-940    	; 0x10c <usbPoll>
}

uint8_t therm_read_byte(void)
{
	uint8_t i=8, n=0;
	while(i--)
 4b8:	01 50       	subi	r16, 0x01	; 1
 4ba:	a8 f7       	brcc	.-22     	; 0x4a6 <therm_read_byte+0xa>
		n>>=1;
		n|=(therm_read_bit()<<7);
			other_function1();
	}
	return n;
}
 4bc:	81 2f       	mov	r24, r17
 4be:	1f 91       	pop	r17
 4c0:	0f 91       	pop	r16
 4c2:	08 95       	ret

000004c4 <therm_reset>:


volatile char THERM_DQ = 0;

uint8_t therm_reset(void)
{
 4c4:	ef 92       	push	r14
 4c6:	ff 92       	push	r15
 4c8:	0f 93       	push	r16
 4ca:	1f 93       	push	r17
	uint8_t i;
	//Pull line low and wait for 480uS
	ds_cbi(THERM_PORT,THERM_DQ);
 4cc:	2b b1       	in	r18, 0x0b	; 11
 4ce:	80 91 11 01 	lds	r24, 0x0111
 4d2:	01 e0       	ldi	r16, 0x01	; 1
 4d4:	10 e0       	ldi	r17, 0x00	; 0
 4d6:	a8 01       	movw	r20, r16
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <therm_reset+0x1a>
 4da:	44 0f       	add	r20, r20
 4dc:	55 1f       	adc	r21, r21
 4de:	8a 95       	dec	r24
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <therm_reset+0x16>
 4e2:	ca 01       	movw	r24, r20
 4e4:	80 95       	com	r24
 4e6:	82 23       	and	r24, r18
 4e8:	8b b9       	out	0x0b, r24	; 11
	ds_sbi(THERM_DDR,THERM_DQ);
 4ea:	2a b1       	in	r18, 0x0a	; 10
 4ec:	80 91 11 01 	lds	r24, 0x0111
 4f0:	a8 01       	movw	r20, r16
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <therm_reset+0x34>
 4f4:	44 0f       	add	r20, r20
 4f6:	55 1f       	adc	r21, r21
 4f8:	8a 95       	dec	r24
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <therm_reset+0x30>
 4fc:	24 2b       	or	r18, r20
 4fe:	2a b9       	out	0x0a, r18	; 10
# ifdef OTHERS_FUNCTIONS
	#include "usbdrv/usbdrv.h"
	
	void other_function1(void)
	{
		usbPoll();
 500:	05 de       	rcall	.-1014   	; 0x10c <usbPoll>
 502:	80 ea       	ldi	r24, 0xA0	; 160
 504:	95 e0       	ldi	r25, 0x05	; 5
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <therm_reset+0x42>
 50a:	00 de       	rcall	.-1024   	; 0x10c <usbPoll>
	ds_sbi(THERM_DDR,THERM_DQ);
		other_function1();
	_delay_us(480);
		other_function1();
	//Release line and wait for 60uS
	ds_cbi(THERM_DDR,THERM_DQ);
 50c:	2a b1       	in	r18, 0x0a	; 10
 50e:	80 91 11 01 	lds	r24, 0x0111
 512:	a8 01       	movw	r20, r16
 514:	02 c0       	rjmp	.+4      	; 0x51a <therm_reset+0x56>
 516:	44 0f       	add	r20, r20
 518:	55 1f       	adc	r21, r21
 51a:	8a 95       	dec	r24
 51c:	e2 f7       	brpl	.-8      	; 0x516 <therm_reset+0x52>
 51e:	ca 01       	movw	r24, r20
 520:	80 95       	com	r24
 522:	82 23       	and	r24, r18
 524:	8a b9       	out	0x0a, r24	; 10
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 526:	80 ef       	ldi	r24, 0xF0	; 240
 528:	8a 95       	dec	r24
 52a:	f1 f7       	brne	.-4      	; 0x528 <therm_reset+0x64>
	_delay_us(60);
	//Store line value and wait until the completion of 480uS period
	i=(THERM_PIN & (1<<THERM_DQ));
 52c:	e9 b0       	in	r14, 0x09	; 9
 52e:	f0 90 11 01 	lds	r15, 0x0111
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 532:	8c ee       	ldi	r24, 0xEC	; 236
 534:	94 e0       	ldi	r25, 0x04	; 4
 536:	01 97       	sbiw	r24, 0x01	; 1
 538:	f1 f7       	brne	.-4      	; 0x536 <therm_reset+0x72>
# ifdef OTHERS_FUNCTIONS
	#include "usbdrv/usbdrv.h"
	
	void other_function1(void)
	{
		usbPoll();
 53a:	e8 dd       	rcall	.-1072   	; 0x10c <usbPoll>
 53c:	02 c0       	rjmp	.+4      	; 0x542 <therm_reset+0x7e>
 53e:	00 0f       	add	r16, r16
 540:	11 1f       	adc	r17, r17
 542:	fa 94       	dec	r15
 544:	e2 f7       	brpl	.-8      	; 0x53e <therm_reset+0x7a>
	i=(THERM_PIN & (1<<THERM_DQ));
	_delay_us(420);
		other_function1();
	//Return the value read from the presence pulse (0=OK, 1=WRONG)
	return i;
}
 546:	8e 2d       	mov	r24, r14
 548:	80 23       	and	r24, r16
 54a:	1f 91       	pop	r17
 54c:	0f 91       	pop	r16
 54e:	ff 90       	pop	r15
 550:	ef 90       	pop	r14
 552:	08 95       	ret

00000554 <therm_read_temperature>:
			other_function1();
	}
}

void therm_read_temperature(unsigned char *buffer, unsigned char PIN_DS)
{
 554:	af 92       	push	r10
 556:	bf 92       	push	r11
 558:	cf 92       	push	r12
 55a:	df 92       	push	r13
 55c:	ef 92       	push	r14
 55e:	ff 92       	push	r15
 560:	0f 93       	push	r16
 562:	1f 93       	push	r17
 564:	df 93       	push	r29
 566:	cf 93       	push	r28
 568:	cd b7       	in	r28, 0x3d	; 61
 56a:	de b7       	in	r29, 0x3e	; 62
 56c:	28 97       	sbiw	r28, 0x08	; 8
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	f8 94       	cli
 572:	de bf       	out	0x3e, r29	; 62
 574:	0f be       	out	0x3f, r0	; 63
 576:	cd bf       	out	0x3d, r28	; 61
 578:	5c 01       	movw	r10, r24
	THERM_DQ = PIN_DS;
 57a:	60 93 11 01 	sts	0x0111, r22
	int8_t digit;
	uint16_t decimal;
	uint8_t bit;
	uint8_t hex_sym = 0;
	unsigned char SROM[8] = {0};
	therm_reset();
 57e:	a2 df       	rcall	.-188    	; 0x4c4 <therm_reset>
	therm_write_byte(THERM_CMD_SKIPROM);
 580:	8c ec       	ldi	r24, 0xCC	; 204
 582:	5b df       	rcall	.-330    	; 0x43a <therm_write_byte>
	therm_write_byte(THERM_CMD_CONVERTTEMP);
 584:	84 e4       	ldi	r24, 0x44	; 68
 586:	59 df       	rcall	.-334    	; 0x43a <therm_write_byte>
 588:	01 c0       	rjmp	.+2      	; 0x58c <therm_read_temperature+0x38>
# ifdef OTHERS_FUNCTIONS
	#include "usbdrv/usbdrv.h"
	
	void other_function1(void)
	{
		usbPoll();
 58a:	c0 dd       	rcall	.-1152   	; 0x10c <usbPoll>
	therm_write_byte(THERM_CMD_SKIPROM);
	therm_write_byte(THERM_CMD_CONVERTTEMP);
	
	//Wait until conversion is complete

	while(!therm_read_bit()) other_function1();
 58c:	1b df       	rcall	.-458    	; 0x3c4 <therm_read_bit>
 58e:	88 23       	and	r24, r24
 590:	e1 f3       	breq	.-8      	; 0x58a <therm_read_temperature+0x36>

	//_delay_ms(800);
	//Reset, skip ROM and send command to read Scratchpad
	therm_reset();	other_function1();
 592:	98 df       	rcall	.-208    	; 0x4c4 <therm_reset>
# ifdef OTHERS_FUNCTIONS
	#include "usbdrv/usbdrv.h"
	
	void other_function1(void)
	{
		usbPoll();
 594:	bb dd       	rcall	.-1162   	; 0x10c <usbPoll>
	while(!therm_read_bit()) other_function1();

	//_delay_ms(800);
	//Reset, skip ROM and send command to read Scratchpad
	therm_reset();	other_function1();
	therm_write_byte(THERM_CMD_SKIPROM);
 596:	8c ec       	ldi	r24, 0xCC	; 204
 598:	50 df       	rcall	.-352    	; 0x43a <therm_write_byte>
	therm_write_byte(THERM_CMD_RSCRATCHPAD);
 59a:	8e eb       	ldi	r24, 0xBE	; 190
 59c:	4e df       	rcall	.-356    	; 0x43a <therm_write_byte>
	//Read Scratchpad (only 2 first bytes)
	temperature[0]=therm_read_byte();	other_function1();
 59e:	7e df       	rcall	.-260    	; 0x49c <therm_read_byte>
 5a0:	f8 2e       	mov	r15, r24
# ifdef OTHERS_FUNCTIONS
	#include "usbdrv/usbdrv.h"
	
	void other_function1(void)
	{
		usbPoll();
 5a2:	b4 dd       	rcall	.-1176   	; 0x10c <usbPoll>
	therm_reset();	other_function1();
	therm_write_byte(THERM_CMD_SKIPROM);
	therm_write_byte(THERM_CMD_RSCRATCHPAD);
	//Read Scratchpad (only 2 first bytes)
	temperature[0]=therm_read_byte();	other_function1();
	temperature[1]=therm_read_byte();	other_function1();
 5a4:	7b df       	rcall	.-266    	; 0x49c <therm_read_byte>
 5a6:	08 2f       	mov	r16, r24
# ifdef OTHERS_FUNCTIONS
	#include "usbdrv/usbdrv.h"
	
	void other_function1(void)
	{
		usbPoll();
 5a8:	b1 dd       	rcall	.-1182   	; 0x10c <usbPoll>
	therm_write_byte(THERM_CMD_SKIPROM);
	therm_write_byte(THERM_CMD_RSCRATCHPAD);
	//Read Scratchpad (only 2 first bytes)
	temperature[0]=therm_read_byte();	other_function1();
	temperature[1]=therm_read_byte();	other_function1();
	therm_reset();	other_function1();
 5aa:	8c df       	rcall	.-232    	; 0x4c4 <therm_reset>
# ifdef OTHERS_FUNCTIONS
	#include "usbdrv/usbdrv.h"
	
	void other_function1(void)
	{
		usbPoll();
 5ac:	af dd       	rcall	.-1186   	; 0x10c <usbPoll>
	temperature[1]=therm_read_byte();	other_function1();
	therm_reset();	other_function1();

	
	//Store temperature integer digits and decimal digits
	digit=temperature[0]>>4;
 5ae:	ef 2c       	mov	r14, r15
 5b0:	e2 94       	swap	r14
 5b2:	6f e0       	ldi	r22, 0x0F	; 15
 5b4:	e6 22       	and	r14, r22
	digit|=(temperature[1]&0x07)<<4;
 5b6:	80 2f       	mov	r24, r16
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	87 70       	andi	r24, 0x07	; 7
 5bc:	90 70       	andi	r25, 0x00	; 0
 5be:	54 e0       	ldi	r21, 0x04	; 4
 5c0:	88 0f       	add	r24, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	5a 95       	dec	r21
 5c6:	e1 f7       	brne	.-8      	; 0x5c0 <therm_read_temperature+0x6c>
 5c8:	e8 2a       	or	r14, r24
	//Store decimal digits
	decimal=temperature[0]&0xf;
 5ca:	8f 2d       	mov	r24, r15
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	8f 70       	andi	r24, 0x0F	; 15
 5d0:	90 70       	andi	r25, 0x00	; 0
	decimal*=5;	
 5d2:	9c 01       	movw	r18, r24
 5d4:	22 0f       	add	r18, r18
 5d6:	33 1f       	adc	r19, r19
 5d8:	22 0f       	add	r18, r18
 5da:	33 1f       	adc	r19, r19
 5dc:	28 0f       	add	r18, r24
 5de:	39 1f       	adc	r19, r25
 5e0:	d2 2e       	mov	r13, r18
 5e2:	c3 2e       	mov	r12, r19
# ifdef OTHERS_FUNCTIONS
	#include "usbdrv/usbdrv.h"
	
	void other_function1(void)
	{
		usbPoll();
 5e4:	93 dd       	rcall	.-1242   	; 0x10c <usbPoll>
	digit|=(temperature[1]&0x07)<<4;
	//Store decimal digits
	decimal=temperature[0]&0xf;
	decimal*=5;	
		other_function1();
	if (temperature[1]>0xFB)
 5e6:	0c 3f       	cpi	r16, 0xFC	; 252
 5e8:	40 f0       	brcs	.+16     	; 0x5fa <therm_read_temperature+0xa6>
	{
	digit = 127-digit;
 5ea:	8f e7       	ldi	r24, 0x7F	; 127
 5ec:	8e 19       	sub	r24, r14
 5ee:	e8 2e       	mov	r14, r24
	buffer[8] = '-';
 5f0:	8d e2       	ldi	r24, 0x2D	; 45
 5f2:	d5 01       	movw	r26, r10
 5f4:	18 96       	adiw	r26, 0x08	; 8
 5f6:	8c 93       	st	X, r24
 5f8:	0b c0       	rjmp	.+22     	; 0x610 <therm_read_temperature+0xbc>
	} 
	else if((temperature[0]==0x00)&&(temperature[1]==0x00)) buffer[0] = ' '; else buffer[0] = '+';
 5fa:	ff 20       	and	r15, r15
 5fc:	31 f4       	brne	.+12     	; 0x60a <therm_read_temperature+0xb6>
 5fe:	00 23       	and	r16, r16
 600:	21 f4       	brne	.+8      	; 0x60a <therm_read_temperature+0xb6>
 602:	80 e2       	ldi	r24, 0x20	; 32
 604:	f5 01       	movw	r30, r10
 606:	80 83       	st	Z, r24
 608:	03 c0       	rjmp	.+6      	; 0x610 <therm_read_temperature+0xbc>
 60a:	8b e2       	ldi	r24, 0x2B	; 43
 60c:	d5 01       	movw	r26, r10
 60e:	8c 93       	st	X, r24
//	uint16_t temper_16bit;
	int8_t digit;
	uint16_t decimal;
	uint8_t bit;
	uint8_t hex_sym = 0;
	unsigned char SROM[8] = {0};
 610:	fe 01       	movw	r30, r28
 612:	31 96       	adiw	r30, 0x01	; 1
 614:	88 e0       	ldi	r24, 0x08	; 8
 616:	df 01       	movw	r26, r30
 618:	1d 92       	st	X+, r1
 61a:	8a 95       	dec	r24
 61c:	e9 f7       	brne	.-6      	; 0x618 <therm_read_temperature+0xc4>
	buffer[8] = '-';
	} 
	else if((temperature[0]==0x00)&&(temperature[1]==0x00)) buffer[0] = ' '; else buffer[0] = '+';
	
	//целая часть 
	buffer[1] = digit / 10 + '0';
 61e:	8e 2d       	mov	r24, r14
 620:	6a e0       	ldi	r22, 0x0A	; 10
 622:	f8 d1       	rcall	.+1008   	; 0xa14 <__divmodqi4>
 624:	80 5d       	subi	r24, 0xD0	; 208
 626:	f5 01       	movw	r30, r10
 628:	81 83       	std	Z+1, r24	; 0x01
	buffer[2] = digit % 10 + '0';
 62a:	8e 2d       	mov	r24, r14
 62c:	6a e0       	ldi	r22, 0x0A	; 10
 62e:	f2 d1       	rcall	.+996    	; 0xa14 <__divmodqi4>
 630:	90 5d       	subi	r25, 0xD0	; 208
 632:	92 83       	std	Z+2, r25	; 0x02
	//дробная часть
	buffer[3] = '.';
 634:	8e e2       	ldi	r24, 0x2E	; 46
 636:	83 83       	std	Z+3, r24	; 0x03
	buffer[4] = decimal/10 + '0';
 638:	8d 2d       	mov	r24, r13
 63a:	9c 2d       	mov	r25, r12
 63c:	6a e0       	ldi	r22, 0x0A	; 10
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	f6 d1       	rcall	.+1004   	; 0xa2e <__udivmodhi4>
 642:	60 5d       	subi	r22, 0xD0	; 208
 644:	64 83       	std	Z+4, r22	; 0x04
	buffer[5] = decimal%10 + '0';
 646:	8d 2d       	mov	r24, r13
 648:	9c 2d       	mov	r25, r12
 64a:	6a e0       	ldi	r22, 0x0A	; 10
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	ef d1       	rcall	.+990    	; 0xa2e <__udivmodhi4>
 650:	80 5d       	subi	r24, 0xD0	; 208
 652:	85 83       	std	Z+5, r24	; 0x05
# ifdef OTHERS_FUNCTIONS
	#include "usbdrv/usbdrv.h"
	
	void other_function1(void)
	{
		usbPoll();
 654:	5b dd       	rcall	.-1354   	; 0x10c <usbPoll>
	buffer[4] = decimal/10 + '0';
	buffer[5] = decimal%10 + '0';
	other_function1();
	

	therm_reset();
 656:	36 df       	rcall	.-404    	; 0x4c4 <therm_reset>
	//Формируем команду поиск ROM
	therm_write_byte(THERM_CMD_SEARCHROM);    
 658:	80 ef       	ldi	r24, 0xF0	; 240
 65a:	ef de       	rcall	.-546    	; 0x43a <therm_write_byte>
# ifdef OTHERS_FUNCTIONS
	#include "usbdrv/usbdrv.h"
	
	void other_function1(void)
	{
		usbPoll();
 65c:	57 dd       	rcall	.-1362   	; 0x10c <usbPoll>
 65e:	88 e0       	ldi	r24, 0x08	; 8
 660:	c8 2e       	mov	r12, r24
 662:	d1 2c       	mov	r13, r1
 664:	cc 0e       	add	r12, r28
 666:	dd 1e       	adc	r13, r29
 668:	1e c0       	rjmp	.+60     	; 0x6a6 <therm_read_temperature+0x152>
	//uint64_t SROM=0;
	other_function1();
	
    for (uint8_t j=0;j<8;j++) {
		for (uint8_t i=0;i<8;i++) {
			bit = therm_read_bit();
 66a:	ac de       	rcall	.-680    	; 0x3c4 <therm_read_bit>
 66c:	08 2f       	mov	r16, r24
				  therm_read_bit();        //// ?????
 66e:	aa de       	rcall	.-684    	; 0x3c4 <therm_read_bit>
			therm_write_bit(bit);
 670:	80 2f       	mov	r24, r16
 672:	6c de       	rcall	.-808    	; 0x34c <therm_write_bit>
			SROM[7-j] |= (bit<<i) + '0';
 674:	10 e0       	ldi	r17, 0x00	; 0
 676:	0e 2c       	mov	r0, r14
 678:	02 c0       	rjmp	.+4      	; 0x67e <therm_read_temperature+0x12a>
 67a:	00 0f       	add	r16, r16
 67c:	11 1f       	adc	r17, r17
 67e:	0a 94       	dec	r0
 680:	e2 f7       	brpl	.-8      	; 0x67a <therm_read_temperature+0x126>
 682:	00 5d       	subi	r16, 0xD0	; 208
 684:	d6 01       	movw	r26, r12
 686:	8c 91       	ld	r24, X
 688:	80 2b       	or	r24, r16
 68a:	8c 93       	st	X, r24
 68c:	08 94       	sec
 68e:	e1 1c       	adc	r14, r1
 690:	f1 1c       	adc	r15, r1
	
	//uint64_t SROM=0;
	other_function1();
	
    for (uint8_t j=0;j<8;j++) {
		for (uint8_t i=0;i<8;i++) {
 692:	b8 e0       	ldi	r27, 0x08	; 8
 694:	eb 16       	cp	r14, r27
 696:	f1 04       	cpc	r15, r1
 698:	41 f7       	brne	.-48     	; 0x66a <therm_read_temperature+0x116>
 69a:	08 94       	sec
 69c:	c1 08       	sbc	r12, r1
 69e:	d1 08       	sbc	r13, r1
	// датчики выдают первый бит совего адреса и его инвертированного значение
	
	//uint64_t SROM=0;
	other_function1();
	
    for (uint8_t j=0;j<8;j++) {
 6a0:	cc 16       	cp	r12, r28
 6a2:	dd 06       	cpc	r13, r29
 6a4:	19 f0       	breq	.+6      	; 0x6ac <therm_read_temperature+0x158>
 6a6:	ee 24       	eor	r14, r14
 6a8:	ff 24       	eor	r15, r15
 6aa:	df cf       	rjmp	.-66     	; 0x66a <therm_read_temperature+0x116>
			therm_write_bit(bit);
			SROM[7-j] |= (bit<<i) + '0';
			
		}
	}
		hex_sym = SROM[0] >> 4;
 6ac:	29 81       	ldd	r18, Y+1	; 0x01
 6ae:	92 2f       	mov	r25, r18
 6b0:	92 95       	swap	r25
 6b2:	9f 70       	andi	r25, 0x0F	; 15
   hex_sym += (hex_sym<10)?'0':'A'-10;
 6b4:	9a 30       	cpi	r25, 0x0A	; 10
 6b6:	10 f0       	brcs	.+4      	; 0x6bc <therm_read_temperature+0x168>
 6b8:	87 e3       	ldi	r24, 0x37	; 55
 6ba:	01 c0       	rjmp	.+2      	; 0x6be <therm_read_temperature+0x16a>
 6bc:	80 e3       	ldi	r24, 0x30	; 48
   buffer[6] = hex_sym;
 6be:	89 0f       	add	r24, r25
 6c0:	f5 01       	movw	r30, r10
 6c2:	86 83       	std	Z+6, r24	; 0x06
   hex_sym = SROM[0] & 0xF;
 6c4:	92 2f       	mov	r25, r18
 6c6:	9f 70       	andi	r25, 0x0F	; 15
   hex_sym += (hex_sym<10)?'0':'A'-10;
 6c8:	9a 30       	cpi	r25, 0x0A	; 10
 6ca:	10 f0       	brcs	.+4      	; 0x6d0 <therm_read_temperature+0x17c>
 6cc:	87 e3       	ldi	r24, 0x37	; 55
 6ce:	01 c0       	rjmp	.+2      	; 0x6d2 <therm_read_temperature+0x17e>
 6d0:	80 e3       	ldi	r24, 0x30	; 48
   buffer[7] = hex_sym;
 6d2:	89 0f       	add	r24, r25
 6d4:	d5 01       	movw	r26, r10
 6d6:	17 96       	adiw	r26, 0x07	; 7
 6d8:	8c 93       	st	X, r24
   hex_sym = SROM[1] >> 4;
 6da:	2a 81       	ldd	r18, Y+2	; 0x02
 6dc:	92 2f       	mov	r25, r18
 6de:	92 95       	swap	r25
 6e0:	9f 70       	andi	r25, 0x0F	; 15
   hex_sym += (hex_sym<10)?'0':'A'-10;
 6e2:	9a 30       	cpi	r25, 0x0A	; 10
 6e4:	10 f0       	brcs	.+4      	; 0x6ea <therm_read_temperature+0x196>
 6e6:	87 e3       	ldi	r24, 0x37	; 55
 6e8:	01 c0       	rjmp	.+2      	; 0x6ec <therm_read_temperature+0x198>
 6ea:	80 e3       	ldi	r24, 0x30	; 48
   buffer[8] = hex_sym;
 6ec:	89 0f       	add	r24, r25
 6ee:	f5 01       	movw	r30, r10
 6f0:	80 87       	std	Z+8, r24	; 0x08
   hex_sym = SROM[1] & 0xF;
 6f2:	92 2f       	mov	r25, r18
 6f4:	9f 70       	andi	r25, 0x0F	; 15
   hex_sym += (hex_sym<10)?'0':'A'-10;
 6f6:	9a 30       	cpi	r25, 0x0A	; 10
 6f8:	10 f0       	brcs	.+4      	; 0x6fe <therm_read_temperature+0x1aa>
 6fa:	87 e3       	ldi	r24, 0x37	; 55
 6fc:	01 c0       	rjmp	.+2      	; 0x700 <therm_read_temperature+0x1ac>
 6fe:	80 e3       	ldi	r24, 0x30	; 48
   buffer[9] = hex_sym;
 700:	89 0f       	add	r24, r25
 702:	d5 01       	movw	r26, r10
 704:	19 96       	adiw	r26, 0x09	; 9
 706:	8c 93       	st	X, r24
   hex_sym = SROM[2] >> 4;
 708:	2b 81       	ldd	r18, Y+3	; 0x03
 70a:	92 2f       	mov	r25, r18
 70c:	92 95       	swap	r25
 70e:	9f 70       	andi	r25, 0x0F	; 15
   hex_sym += (hex_sym<10)?'0':'A'-10;
 710:	9a 30       	cpi	r25, 0x0A	; 10
 712:	10 f0       	brcs	.+4      	; 0x718 <therm_read_temperature+0x1c4>
 714:	87 e3       	ldi	r24, 0x37	; 55
 716:	01 c0       	rjmp	.+2      	; 0x71a <therm_read_temperature+0x1c6>
 718:	80 e3       	ldi	r24, 0x30	; 48
   buffer[10] = hex_sym;
 71a:	89 0f       	add	r24, r25
 71c:	f5 01       	movw	r30, r10
 71e:	82 87       	std	Z+10, r24	; 0x0a
   hex_sym = SROM[2] & 0xF;
 720:	92 2f       	mov	r25, r18
 722:	9f 70       	andi	r25, 0x0F	; 15
   hex_sym += (hex_sym<10)?'0':'A'-10;
 724:	9a 30       	cpi	r25, 0x0A	; 10
 726:	10 f0       	brcs	.+4      	; 0x72c <therm_read_temperature+0x1d8>
 728:	87 e3       	ldi	r24, 0x37	; 55
 72a:	01 c0       	rjmp	.+2      	; 0x72e <therm_read_temperature+0x1da>
 72c:	80 e3       	ldi	r24, 0x30	; 48
   buffer[11] = hex_sym;
 72e:	89 0f       	add	r24, r25
 730:	d5 01       	movw	r26, r10
 732:	1b 96       	adiw	r26, 0x0b	; 11
 734:	8c 93       	st	X, r24
   hex_sym = SROM[3] >> 4;
 736:	2c 81       	ldd	r18, Y+4	; 0x04
 738:	92 2f       	mov	r25, r18
 73a:	92 95       	swap	r25
 73c:	9f 70       	andi	r25, 0x0F	; 15
   hex_sym += (hex_sym<10)?'0':'A'-10;
 73e:	9a 30       	cpi	r25, 0x0A	; 10
 740:	10 f0       	brcs	.+4      	; 0x746 <therm_read_temperature+0x1f2>
 742:	87 e3       	ldi	r24, 0x37	; 55
 744:	01 c0       	rjmp	.+2      	; 0x748 <therm_read_temperature+0x1f4>
 746:	80 e3       	ldi	r24, 0x30	; 48
   buffer[12] = hex_sym;
 748:	89 0f       	add	r24, r25
 74a:	f5 01       	movw	r30, r10
 74c:	84 87       	std	Z+12, r24	; 0x0c
   hex_sym = SROM[3] & 0xF;
 74e:	92 2f       	mov	r25, r18
 750:	9f 70       	andi	r25, 0x0F	; 15
   hex_sym += (hex_sym<10)?'0':'A'-10;
 752:	9a 30       	cpi	r25, 0x0A	; 10
 754:	10 f0       	brcs	.+4      	; 0x75a <therm_read_temperature+0x206>
 756:	87 e3       	ldi	r24, 0x37	; 55
 758:	01 c0       	rjmp	.+2      	; 0x75c <therm_read_temperature+0x208>
 75a:	80 e3       	ldi	r24, 0x30	; 48
   buffer[13] = hex_sym;
 75c:	89 0f       	add	r24, r25
 75e:	d5 01       	movw	r26, r10
 760:	1d 96       	adiw	r26, 0x0d	; 13
 762:	8c 93       	st	X, r24
# ifdef OTHERS_FUNCTIONS
	#include "usbdrv/usbdrv.h"
	
	void other_function1(void)
	{
		usbPoll();
 764:	d3 dc       	rcall	.-1626   	; 0x10c <usbPoll>

	//_delay_ms(4000);
	other_function1();
	

}
 766:	28 96       	adiw	r28, 0x08	; 8
 768:	0f b6       	in	r0, 0x3f	; 63
 76a:	f8 94       	cli
 76c:	de bf       	out	0x3e, r29	; 62
 76e:	0f be       	out	0x3f, r0	; 63
 770:	cd bf       	out	0x3d, r28	; 61
 772:	cf 91       	pop	r28
 774:	df 91       	pop	r29
 776:	1f 91       	pop	r17
 778:	0f 91       	pop	r16
 77a:	ff 90       	pop	r15
 77c:	ef 90       	pop	r14
 77e:	df 90       	pop	r13
 780:	cf 90       	pop	r12
 782:	bf 90       	pop	r11
 784:	af 90       	pop	r10
 786:	08 95       	ret

00000788 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 788:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 78a:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 78c:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 78e:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 790:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 792:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 794:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 796:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 798:	09 c0       	rjmp	.+18     	; 0x7ac <usbCrcLoopEntry>

0000079a <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 79a:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 79c:	82 27       	eor	r24, r18

0000079e <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 79e:	97 95       	ror	r25
    ror     resCrcL
 7a0:	87 95       	ror	r24
    brcs    usbCrcNoXor
 7a2:	10 f0       	brcs	.+4      	; 0x7a8 <usbCrcNoXor>
    eor     resCrcL, polyL
 7a4:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 7a6:	95 27       	eor	r25, r21

000007a8 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 7a8:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 7aa:	c8 f3       	brcs	.-14     	; 0x79e <usbCrcBitLoop>

000007ac <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 7ac:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 7ae:	a8 f3       	brcs	.-22     	; 0x79a <usbCrcByteLoop>

000007b0 <usbCrcReady>:
usbCrcReady:
    ret
 7b0:	08 95       	ret

000007b2 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 7b2:	ea df       	rcall	.-44     	; 0x788 <usbCrc16>
    st      ptr+, resCrcL
 7b4:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 7b6:	9d 93       	st	X+, r25
    ret
 7b8:	08 95       	ret

000007ba <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
 7ba:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
 7bc:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
 7be:	cf 93       	push	r28

000007c0 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 7c0:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 7c2:	4b 9b       	sbis	0x09, 3	; 9
    brne    waitForJ        ; just make sure we have ANY timeout
 7c4:	e9 f7       	brne	.-6      	; 0x7c0 <waitForJ>

000007c6 <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
 7c6:	4b 9b       	sbis	0x09, 3	; 9
    rjmp    foundK
 7c8:	09 c0       	rjmp	.+18     	; 0x7dc <foundK>
    sbis    USBIN, USBMINUS
 7ca:	4b 9b       	sbis	0x09, 3	; 9
    rjmp    foundK
 7cc:	07 c0       	rjmp	.+14     	; 0x7dc <foundK>
    sbis    USBIN, USBMINUS
 7ce:	4b 9b       	sbis	0x09, 3	; 9
    rjmp    foundK
 7d0:	05 c0       	rjmp	.+10     	; 0x7dc <foundK>
    sbis    USBIN, USBMINUS
 7d2:	4b 9b       	sbis	0x09, 3	; 9
    rjmp    foundK
 7d4:	03 c0       	rjmp	.+6      	; 0x7dc <foundK>
    sbis    USBIN, USBMINUS
 7d6:	4b 9b       	sbis	0x09, 3	; 9
    rjmp    foundK
 7d8:	01 c0       	rjmp	.+2      	; 0x7dc <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 7da:	a1 c0       	rjmp	.+322    	; 0x91e <sofError>

000007dc <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
 7dc:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
 7de:	c0 91 21 01 	lds	r28, 0x0121
    clr     YH                  ;1 [5]
 7e2:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
 7e4:	c8 5d       	subi	r28, 0xD8	; 216
    sbci    YH, hi8(-(usbRxBuf));1 [7]
 7e6:	de 4f       	sbci	r29, 0xFE	; 254

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
 7e8:	4b 9b       	sbis	0x09, 3	; 9
    rjmp    haveTwoBitsK    ;2 [10]
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
 7ec:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
 7ee:	eb cf       	rjmp	.-42     	; 0x7c6 <waitForK>

000007f0 <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
 7f0:	2f 93       	push	r18
    push    x1              ;2 [12]
 7f2:	0f 93       	push	r16
    push    x2              ;2 [14]
 7f4:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
 7f6:	09 b1       	in	r16, 0x09	; 9
    ldi     shift, 0xff     ;1 [18]
 7f8:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
 7fa:	03 fb       	bst	r16, 3
    bld     shift, 0        ;1 [20]
 7fc:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
 7fe:	4f 93       	push	r20
    push    cnt             ;2 [24]
 800:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
 802:	19 b1       	in	r17, 0x09	; 9
    ser     x3              ;1 [26] [inserted init instruction]
 804:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
 806:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
 808:	03 fb       	bst	r16, 3
    bld     shift, 1        ;1 [29]
 80a:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
 80c:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
 80e:	31 c0       	rjmp	.+98     	; 0x872 <rxbit2>

00000810 <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
 810:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
 812:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
 814:	19 b1       	in	r17, 0x09	; 9
    ori     shift, 0x01 ;1 [18]
 816:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
 818:	28 c0       	rjmp	.+80     	; 0x86a <didUnstuff0>

0000081a <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
 81a:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
 81c:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
 81e:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
 820:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
 822:	09 b1       	in	r16, 0x09	; 9
    rjmp    didUnstuff1 ;2 [27]
 824:	29 c0       	rjmp	.+82     	; 0x878 <didUnstuff1>

00000826 <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
 826:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
 828:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
 82a:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
 82c:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
 82e:	19 b1       	in	r17, 0x09	; 9
    rjmp    didUnstuff2 ;2 [35]
 830:	2b c0       	rjmp	.+86     	; 0x888 <didUnstuff2>

00000832 <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
 832:	19 b1       	in	r17, 0x09	; 9
    andi    x3, ~0x08   ;1 [35]
 834:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
 836:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
 838:	2a c0       	rjmp	.+84     	; 0x88e <didUnstuff3>

0000083a <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
 83a:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
 83c:	09 b1       	in	r16, 0x09	; 9
    ori     shift, 0x10 ;1 [42]
 83e:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
 840:	2c c0       	rjmp	.+88     	; 0x89a <didUnstuff4>

00000842 <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
 842:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
 844:	19 b1       	in	r17, 0x09	; 9
    ori     shift, 0x20 ;1 [50]
 846:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
 848:	2f c0       	rjmp	.+94     	; 0x8a8 <didUnstuff5>

0000084a <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
 84a:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
 84c:	09 b1       	in	r16, 0x09	; 9
    ori     shift, 0x40 ;1 [58]
 84e:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
 850:	32 c0       	rjmp	.+100    	; 0x8b6 <didUnstuff6>

00000852 <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 852:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
 854:	09 b1       	in	r16, 0x09	; 9
    st      y+, x3      ;2 [3] store data
 856:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
 858:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
 85a:	00 00       	nop
    eor     x2, x1      ;1 [6]
 85c:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
 85e:	13 fb       	bst	r17, 3
    bld     shift, 0    ;1 [8]
 860:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
 862:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK ;1 [10]
 864:	1c 70       	andi	r17, 0x0C	; 12
    breq    se0         ;1 [11] SE0 check for bit 1
 866:	c9 f1       	breq	.+114    	; 0x8da <se0>
    andi    shift, 0xf9 ;1 [12]
 868:	29 7f       	andi	r18, 0xF9	; 249

0000086a <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
 86a:	91 f2       	breq	.-92     	; 0x810 <unstuff0>
    eor     x1, x2      ;1 [14]
 86c:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
 86e:	03 fb       	bst	r16, 3
    bld     shift, 1    ;1 [16]
 870:	21 f9       	bld	r18, 1

00000872 <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
 872:	09 b1       	in	r16, 0x09	; 9
    andi    shift, 0xf3 ;1 [18]
 874:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
 876:	89 f2       	breq	.-94     	; 0x81a <unstuff1>

00000878 <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
 878:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
 87a:	58 f1       	brcs	.+86     	; 0x8d2 <overflow>
    eor     x2, x1      ;1 [22]
 87c:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
 87e:	13 fb       	bst	r17, 3
    bld     shift, 2    ;1 [24]
 880:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
 882:	19 b1       	in	r17, 0x09	; 9
    andi    shift, 0xe7 ;1 [26]
 884:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
 886:	79 f2       	breq	.-98     	; 0x826 <unstuff2>

00000888 <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
 888:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
 88a:	03 fb       	bst	r16, 3
    bld     shift, 3    ;1 [30]
 88c:	23 f9       	bld	r18, 3

0000088e <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
 88e:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
 890:	81 f2       	breq	.-96     	; 0x832 <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
 892:	09 b1       	in	r16, 0x09	; 9
    eor     x2, x1      ;1 [34]
 894:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
 896:	13 fb       	bst	r17, 3
    bld     shift, 4    ;1 [36]
 898:	24 f9       	bld	r18, 4

0000089a <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
 89a:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
 89c:	71 f2       	breq	.-100    	; 0x83a <unstuff4>
    nop2                ;2 [40]
 89e:	00 c0       	rjmp	.+0      	; 0x8a0 <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
 8a0:	19 b1       	in	r17, 0x09	; 9
    eor     x1, x2      ;1 [42]
 8a2:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
 8a4:	03 fb       	bst	r16, 3
    bld     shift, 5    ;1 [44]
 8a6:	25 f9       	bld	r18, 5

000008a8 <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
 8a8:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
 8aa:	59 f2       	breq	.-106    	; 0x842 <unstuff5>
    nop2                ;2 [48]
 8ac:	00 c0       	rjmp	.+0      	; 0x8ae <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
 8ae:	09 b1       	in	r16, 0x09	; 9
    eor     x2, x1      ;1 [50]
 8b0:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
 8b2:	13 fb       	bst	r17, 3
    bld     shift, 6    ;1 [52]
 8b4:	26 f9       	bld	r18, 6

000008b6 <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
 8b6:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
 8b8:	40 f2       	brcs	.-112    	; 0x84a <unstuff6>
    nop2                ;2 [56]
 8ba:	00 c0       	rjmp	.+0      	; 0x8bc <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
 8bc:	19 b1       	in	r17, 0x09	; 9
    eor     x1, x2      ;1 [58]
 8be:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
 8c0:	03 fb       	bst	r16, 3
    bld     shift, 7    ;1 [60]
 8c2:	27 f9       	bld	r18, 7

000008c4 <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
 8c4:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
 8c6:	28 f6       	brcc	.-118    	; 0x852 <rxLoop>

000008c8 <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
 8c8:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
 8ca:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
 8cc:	19 b1       	in	r17, 0x09	; 9
    nop                 ;1 [66]
 8ce:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
 8d0:	f9 cf       	rjmp	.-14     	; 0x8c4 <didUnstuff7>

000008d2 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 8d2:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 8d4:	1c bb       	out	0x1c, r17	; 28

000008d6 <ignorePacket>:
ignorePacket:
    clr     token
 8d6:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 8d8:	17 c0       	rjmp	.+46     	; 0x908 <handleSetupOrOut>

000008da <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 8da:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 8dc:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 8de:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 8e0:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 8e2:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 8e4:	1c bb       	out	0x1c, r17	; 28
    ld      token, y            ;[11]
 8e6:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 8e8:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 8ea:	e9 f0       	breq	.+58     	; 0x926 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 8ec:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 8ee:	d9 f0       	breq	.+54     	; 0x926 <handleData>
    lds     shift, usbDeviceAddr;[17]
 8f0:	20 91 1f 01 	lds	r18, 0x011F
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 8f4:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 8f6:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 8f8:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 8fa:	ed cf       	rjmp	.-38     	; 0x8d6 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
    rol     x3                  ;[26] shift in LSB of endpoint
#endif
    cpi     token, USBPID_IN    ;[27]
 8fc:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 8fe:	41 f1       	breq	.+80     	; 0x950 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 900:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 902:	11 f0       	breq	.+4      	; 0x908 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 904:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 906:	39 f7       	brne	.-50     	; 0x8d6 <ignorePacket>

00000908 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 908:	00 93 26 01 	sts	0x0126, r16

0000090c <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 90c:	3f 91       	pop	r19
 90e:	4f 91       	pop	r20
 910:	1f 91       	pop	r17
 912:	0f 91       	pop	r16
 914:	2f 91       	pop	r18
 916:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
 918:	cc b3       	in	r28, 0x1c	; 28
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 91a:	c0 fd       	sbrc	r28, 0
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 91c:	51 cf       	rjmp	.-350    	; 0x7c0 <waitForJ>

0000091e <sofError>:
sofError:
    POP_RETI                    ;macro call
 91e:	cf 91       	pop	r28
 920:	cf bf       	out	0x3f, r28	; 63
 922:	cf 91       	pop	r28
    reti
 924:	18 95       	reti

00000926 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 926:	20 91 26 01 	lds	r18, 0x0126
    tst     shift               ;[20]
 92a:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 92c:	79 f3       	breq	.-34     	; 0x90c <doReturn>
    lds     x2, usbRxLen        ;[22]
 92e:	10 91 24 01 	lds	r17, 0x0124
    tst     x2                  ;[24]
 932:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 934:	11 f5       	brne	.+68     	; 0x97a <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 936:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 938:	12 f1       	brmi	.+68     	; 0x97e <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 93a:	30 93 24 01 	sts	0x0124, r19
    sts     usbRxToken, shift   ;[30]
 93e:	20 93 20 01 	sts	0x0120, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
 942:	10 91 21 01 	lds	r17, 0x0121
    ldi     cnt, USB_BUFSIZE    ;[34]
 946:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 948:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 94a:	30 93 21 01 	sts	0x0121, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 94e:	17 c0       	rjmp	.+46     	; 0x97e <sendAckAndReti>

00000950 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 950:	00 91 24 01 	lds	r16, 0x0124
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 954:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 956:	8c f4       	brge	.+34     	; 0x97a <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 958:	0a e5       	ldi	r16, 0x5A	; 90
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 95a:	30 91 00 01 	lds	r19, 0x0100
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 95e:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 960:	10 c0       	rjmp	.+32     	; 0x982 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 962:	00 93 00 01 	sts	0x0100, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
 966:	c2 e1       	ldi	r28, 0x12	; 18
    ldi     YH, hi8(usbTxBuf)   ;[44]
 968:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 96a:	0f c0       	rjmp	.+30     	; 0x98a <usbSendAndReti>

0000096c <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
 96c:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
 96e:	a8 f4       	brcc	.+42     	; 0x99a <doExorN1>
    subi    x4, 1               ;[-3]
 970:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
 972:	a9 f4       	brne	.+42     	; 0x99e <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
 974:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
 976:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
 978:	f9 cf       	rjmp	.-14     	; 0x96c <stuffN1Delay>

0000097a <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
 97a:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
 97c:	03 c0       	rjmp	.+6      	; 0x984 <usbSendX3>

0000097e <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
 97e:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
 980:	01 c0       	rjmp	.+2      	; 0x984 <usbSendX3>

00000982 <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
 982:	43 2f       	mov	r20, r19

00000984 <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
 984:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
 986:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
 988:	32 e0       	ldi	r19, 0x02	; 2

0000098a <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
 98a:	1a b1       	in	r17, 0x0a	; 10
    ori     x2, USBMASK         ;[-11]
 98c:	1c 60       	ori	r17, 0x0C	; 12
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 98e:	5b 9a       	sbi	0x0b, 3	; 11
    out     USBDDR, x2          ;[-8] <--- acquire bus
 990:	1a b9       	out	0x0a, r17	; 10
    in      x1, USBOUT          ;[-7] port mirror for tx loop
 992:	0b b1       	in	r16, 0x0b	; 11
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
 994:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
 996:	1c e0       	ldi	r17, 0x0C	; 12
    push    x4                  ;[-4]
 998:	5f 93       	push	r21

0000099a <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
 99a:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
 99c:	56 e0       	ldi	r21, 0x06	; 6

0000099e <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
 99e:	0b b9       	out	0x0b, r16	; 11
    ror     shift               ;[01]
 9a0:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
 9a2:	20 f4       	brcc	.+8      	; 0x9ac <doExorN2>
    subi    x4, 1               ;[03]
 9a4:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
 9a6:	21 f4       	brne	.+8      	; 0x9b0 <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
 9a8:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
 9aa:	f9 cf       	rjmp	.-14     	; 0x99e <commonN1>

000009ac <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
 9ac:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
 9ae:	56 e0       	ldi	r21, 0x06	; 6

000009b0 <commonN2>:
commonN2:
    nop                         ;[06] [14]
 9b0:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
 9b2:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
 9b4:	0b b9       	out	0x0b, r16	; 11
    brcs    txBitloop           ;[09]      [25] [41]
 9b6:	d0 f2       	brcs	.-76     	; 0x96c <stuffN1Delay>

000009b8 <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
 9b8:	27 95       	ror	r18
    brcc    doExor6             ;[43]
 9ba:	28 f4       	brcc	.+10     	; 0x9c6 <doExor6>
    subi    x4, 1               ;[44]
 9bc:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
 9be:	29 f4       	brne	.+10     	; 0x9ca <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
 9c0:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
 9c2:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
 9c4:	f9 cf       	rjmp	.-14     	; 0x9b8 <stuff6Delay>

000009c6 <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
 9c6:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
 9c8:	56 e0       	ldi	r21, 0x06	; 6

000009ca <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
 9ca:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
 9cc:	0b b9       	out	0x0b, r16	; 11
    brcc    doExor7             ;[49]
 9ce:	20 f4       	brcc	.+8      	; 0x9d8 <doExor7>
    subi    x4, 1               ;[50]
 9d0:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
 9d2:	21 f4       	brne	.+8      	; 0x9dc <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
 9d4:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
 9d6:	f9 cf       	rjmp	.-14     	; 0x9ca <common6>

000009d8 <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
 9d8:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
 9da:	56 e0       	ldi	r21, 0x06	; 6

000009dc <common7>:
common7:
    ld      shift, y+           ;[53]
 9dc:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
 9de:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
 9e0:	0b b9       	out	0x0b, r16	; 11
    brne    txByteLoop          ;[57]
 9e2:	21 f6       	brne	.-120    	; 0x96c <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
 9e4:	03 7f       	andi	r16, 0xF3	; 243
    lds     x2, usbNewDeviceAddr;[59]
 9e6:	10 91 25 01 	lds	r17, 0x0125
    lsl     x2                  ;[61] we compare with left shifted address
 9ea:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
 9ec:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
 9ee:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
 9f0:	0b b9       	out	0x0b, r16	; 11
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
 9f2:	11 f0       	breq	.+4      	; 0x9f8 <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
 9f4:	10 93 1f 01 	sts	0x011F, r17

000009f8 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
 9f8:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[04]
 9fa:	1c bb       	out	0x1c, r17	; 28
    ori     x1, USBIDLE         ;[05]
 9fc:	08 60       	ori	r16, 0x08	; 8
    in      x2, USBDDR          ;[06]
 9fe:	1a b1       	in	r17, 0x0a	; 10
    cbr     x2, USBMASK         ;[07] set both pins to input
 a00:	13 7f       	andi	r17, 0xF3	; 243
    mov     x3, x1              ;[08]
 a02:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
 a04:	43 7f       	andi	r20, 0xF3	; 243
    pop     x4                  ;[10]
 a06:	5f 91       	pop	r21
    nop2                        ;[12]
 a08:	00 c0       	rjmp	.+0      	; 0xa0a <skipAddrAssign+0x12>
    nop2                        ;[14]
 a0a:	00 c0       	rjmp	.+0      	; 0xa0c <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
 a0c:	0b b9       	out	0x0b, r16	; 11
    out     USBDDR, x2          ;[17] <-- release bus now
 a0e:	1a b9       	out	0x0a, r17	; 10
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
 a10:	4b b9       	out	0x0b, r20	; 11
    rjmp    doReturn
 a12:	7c cf       	rjmp	.-264    	; 0x90c <doReturn>

00000a14 <__divmodqi4>:
 a14:	87 fb       	bst	r24, 7
 a16:	08 2e       	mov	r0, r24
 a18:	06 26       	eor	r0, r22
 a1a:	87 fd       	sbrc	r24, 7
 a1c:	81 95       	neg	r24
 a1e:	67 fd       	sbrc	r22, 7
 a20:	61 95       	neg	r22
 a22:	19 d0       	rcall	.+50     	; 0xa56 <__udivmodqi4>
 a24:	0e f4       	brtc	.+2      	; 0xa28 <__divmodqi4_1>
 a26:	91 95       	neg	r25

00000a28 <__divmodqi4_1>:
 a28:	07 fc       	sbrc	r0, 7
 a2a:	81 95       	neg	r24

00000a2c <__divmodqi4_exit>:
 a2c:	08 95       	ret

00000a2e <__udivmodhi4>:
 a2e:	aa 1b       	sub	r26, r26
 a30:	bb 1b       	sub	r27, r27
 a32:	51 e1       	ldi	r21, 0x11	; 17
 a34:	07 c0       	rjmp	.+14     	; 0xa44 <__udivmodhi4_ep>

00000a36 <__udivmodhi4_loop>:
 a36:	aa 1f       	adc	r26, r26
 a38:	bb 1f       	adc	r27, r27
 a3a:	a6 17       	cp	r26, r22
 a3c:	b7 07       	cpc	r27, r23
 a3e:	10 f0       	brcs	.+4      	; 0xa44 <__udivmodhi4_ep>
 a40:	a6 1b       	sub	r26, r22
 a42:	b7 0b       	sbc	r27, r23

00000a44 <__udivmodhi4_ep>:
 a44:	88 1f       	adc	r24, r24
 a46:	99 1f       	adc	r25, r25
 a48:	5a 95       	dec	r21
 a4a:	a9 f7       	brne	.-22     	; 0xa36 <__udivmodhi4_loop>
 a4c:	80 95       	com	r24
 a4e:	90 95       	com	r25
 a50:	bc 01       	movw	r22, r24
 a52:	cd 01       	movw	r24, r26
 a54:	08 95       	ret

00000a56 <__udivmodqi4>:
 a56:	99 1b       	sub	r25, r25
 a58:	79 e0       	ldi	r23, 0x09	; 9
 a5a:	04 c0       	rjmp	.+8      	; 0xa64 <__udivmodqi4_ep>

00000a5c <__udivmodqi4_loop>:
 a5c:	99 1f       	adc	r25, r25
 a5e:	96 17       	cp	r25, r22
 a60:	08 f0       	brcs	.+2      	; 0xa64 <__udivmodqi4_ep>
 a62:	96 1b       	sub	r25, r22

00000a64 <__udivmodqi4_ep>:
 a64:	88 1f       	adc	r24, r24
 a66:	7a 95       	dec	r23
 a68:	c9 f7       	brne	.-14     	; 0xa5c <__udivmodqi4_loop>
 a6a:	80 95       	com	r24
 a6c:	08 95       	ret

00000a6e <_exit>:
 a6e:	f8 94       	cli

00000a70 <__stop_program>:
 a70:	ff cf       	rjmp	.-2      	; 0xa70 <__stop_program>
